***

This development compiles under Coq8.5.
To build, run 'make'.

***

Differences from the paper:

- While L1 follows the semantics in the paper, L2 and L3 differ from
  the paper in the following ways:

  + Functions and function types are n-ary, and argument values are
    stored in the call-frame immediately after they are computed.

  + The language provides three variants of n-ary let-binding:
    sequential lets, parallel lets, and recursive lets (following the
    static semantics given for these in [1]). Recursive lets are
    restricted to bind values of function type only.

  + The language has boolean expressions and simple if-then-else
    branching.

  + The language has sequential composition.

- The paper assumes that declarations are globally unique in resolved
  scope graphs. In contrast, most predicates in the Coq development
  rely on declarations being uniquely distinguished in individual
  scopes, and pairs consisting of a scope identifier and a declaration
  identifier as the "static address" for a declaration.


References:

[1] Pierre Neron, Andrew P. Tolmach, Eelco Visser, Guido Wachsmuth: A
    Theory of Name Resolution. ESOP 2015: 205-231
    doi: http://dx.doi.org/10.1007/978-3-662-46669-8_9